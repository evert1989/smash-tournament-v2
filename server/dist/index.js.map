{"version":3,"sources":["constants/paths.js","../../constants/settings.json","state/actions/actionTypes.js","state/actions/dashboardActions.js","state/actions/globalActions.js","state/actions/playerActions.js","state/actions/mainActionCreator.js","state/reducers/dashboardReducer.js","state/reducers/playerReducer.js","../../constants/states.json","state/reducers/stateReducer.js","state/reducers/mainReducer.js","state/store.js","util/math-utils.js","util/game-utils.js","util/state-utils.js","../../constants/events.json","util/player-utils.js","sockets/WebSocketServer.js","index.js"],"names":["path","require","module","exports","ROOT_PATH","resolve","__dirname","HOST","PORTS","EXPRESS_PORT","WS_PORT","DASHBOARD","CREATE","NEXT_ROUND","SET_ROUNDS","SET_WINNER","GLOBAL","RESET","SET_STATE","PLAYER","ELIMINATED","JOIN","SET_KNOCKOUT_POINTS","UPDATE_POINTS","createGame","id","payload","type","nextRound","setRounds","rounds","setWinner","endSession","setState","state","joinGame","player","playerEliminated","setKnockoutPoints","points","updatePoints","dashboardActions","globalActions","playerActions","mainActionCreator","defaultProps","currentRound","gameID","players","winner","dashboardReducer","action","playerReducer","eliminated","map","updatedPlayer","parseInt","IDLE","LOBBY","INTRO","ROUND","LADDER","KNOCKOUT","WINNER","STATES","stateReducer","combineReducers","mainReducer","activeState","dashboard","bindActionCreators","createStore","store","actions","dispatch","digit","Math","round","random","generateID","Date","now","substring","getNearestPowerOf2","n","clz32","calculateTotalRounds","playersPerRound","total","counter","remainder","length","generateGame","generateSingleRound","usedPlayers","used","targetPlayer","usablePlayers","i","filter","indexOf","push","generateRotations","totalRounds","generateRounds","getState","generateKnockoutLadder","playerIDs","playersInGame","sort","a","b","maxPlayers","knockoutPlayers","slice","openLobby","console","log","startGame","startRound","createLadder","knockout","flat","forEach","startKnockout","nextKnockout","showWinner","find","name","endGame","playerJoins","newPlayer","SERVER","STATE","HEARTBEAT","PLAYER_JOINS","OPEN_LOBBY","START_GAME","START_ROUND","START_KNOCKOUT","NEXT_KNOCKOUT","END_GAME","setRoundPoints","updateEliminated","targetWinner","roundWinner","Websocket","WebSocketServer","constructor","previousState","send","client","req","on","handleSocketClose","handleSocketMessage","connection","remoteAddress","server","Server","noServer","port","handleConnection","subscribe","handleStoreChange","message","event","data","JSON","parse","clients","stringify","bodyParser","compression","cors","express","expressServer","use","methods","origin","json","urlencoded","extended","static","redirect","listen"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["// Imports\n// ---------------------------------------------------------------------------------------------------------------------\n// Vendor\nconst path = require('path');\n\n// Exports\n// ---------------------------------------------------------------------------------------------------------------------\nmodule.exports = {\n\tROOT_PATH: path.resolve(__dirname, '../../'),\n};\n","module.exports={HOST:\"127.0.0.1\",PORTS:{EXPRESS_PORT:3e3,WS_PORT:5e3}};","// Dashboard actions\n// ---------------------------------------------------------------------------------------------------------------------\nconst DASHBOARD = {\n\tCREATE: 'DASHBOARD_CREATE',\n\tNEXT_ROUND: 'DASHBOARD_NEXT_ROUND',\n\tSET_ROUNDS: 'DASHBOARD_SET_ROUNDS',\n\tSET_WINNER: 'DASHBOARD_SET_WINNER',\n};\n\n// Global actions\n// ---------------------------------------------------------------------------------------------------------------------\nconst GLOBAL = {\n\tRESET: 'GLOBAL_RESET',\n\tSET_STATE: 'GLOBAL_SET_STATE',\n};\n\n// Player actions\n// ---------------------------------------------------------------------------------------------------------------------\nconst PLAYER = {\n\tELIMINATED: 'PLAYER_ELIMINATED',\n\tJOIN: 'PLAYER_JOIN',\n\tSET_KNOCKOUT_POINTS: 'SET_KNOCKOUT_POINTS',\n\tUPDATE_POINTS: 'PLAYER_UPDATE_POINTS',\n};\n\n// Exports\n// ---------------------------------------------------------------------------------------------------------------------\nmodule.exports = {\n\tDASHBOARD,\n\tGLOBAL,\n\tPLAYER,\n};\n","// @flow\n\n// Imports\n// ---------------------------------------------------------------------------------------------------------------------\nconst { DASHBOARD } = require('./actionTypes');\n\n// Types\n// ---------------------------------------------------------------------------------------------------------------------\ntype Taction = {\n\tpayload?: mixed,\n\ttype: string\n};\n\n// Actions\n// ---------------------------------------------------------------------------------------------------------------------\nconst createGame = (id: string): Taction => ({\n\tpayload: id,\n\ttype: DASHBOARD.CREATE,\n});\n\nconst nextRound = (): Taction => ({\n\ttype: DASHBOARD.NEXT_ROUND,\n});\n\nconst setRounds = (rounds: Array<Array<string>>): Taction => ({\n\tpayload: rounds,\n\ttype: DASHBOARD.SET_ROUNDS,\n});\n\nconst setWinner = (id: number): Taction => ({\n\tpayload: id,\n\ttype: DASHBOARD.SET_WINNER,\n});\n\n// Exports\n// ---------------------------------------------------------------------------------------------------------------------\nmodule.exports = {\n\tcreateGame,\n\tnextRound,\n\tsetRounds,\n\tsetWinner,\n};\n","// @flow\n\n// Imports\n// ---------------------------------------------------------------------------------------------------------------------\nconst { GLOBAL } = require('./actionTypes');\n\n// Types\n// ---------------------------------------------------------------------------------------------------------------------\ntype Taction = {\n\tpayload?: string,\n\ttype: string\n};\n\n// Actions\n// ---------------------------------------------------------------------------------------------------------------------\nconst endSession = (): Taction => ({\n\ttype: GLOBAL.RESET,\n});\n\nconst setState = (state: string): Taction => ({\n\tpayload: state,\n\ttype: GLOBAL.SET_STATE,\n});\n\n// Exports\n// ---------------------------------------------------------------------------------------------------------------------\nmodule.exports = {\n\tendSession,\n\tsetState,\n};\n","// @flow\n\n// Imports\n// ---------------------------------------------------------------------------------------------------------------------\nconst { PLAYER } = require('./actionTypes');\n\n// Types\n// ---------------------------------------------------------------------------------------------------------------------\ntype Tplayer = {\n\tid: number,\n\tname: string,\n\tgameID: string,\n};\n\ntype Taction = {\n\tpayload: any,\n\ttype: string,\n};\n\n// Actions\n// ---------------------------------------------------------------------------------------------------------------------\nconst joinGame = (player: Tplayer): Taction => ({\n\tpayload: player,\n\ttype: PLAYER.JOIN,\n});\n\nconst playerEliminated = (player: number): Taction => ({\n\tpayload: player,\n\ttype: PLAYER.ELIMINATED,\n});\n\nconst setKnockoutPoints = (id: number, points: number): Taction => ({\n\tpayload: {\n\t\tid,\n\t\tpoints,\n\t},\n\ttype: PLAYER.SET_KNOCKOUT_POINTS,\n});\n\nconst updatePoints = (id: number, points: number): Taction => ({\n\tpayload: {\n\t\tid,\n\t\tpoints,\n\t},\n\ttype: PLAYER.UPDATE_POINTS,\n});\n\n// Exports\n// ---------------------------------------------------------------------------------------------------------------------\nmodule.exports = {\n\tjoinGame,\n\tplayerEliminated,\n\tsetKnockoutPoints,\n\tupdatePoints,\n};\n","// @flow\n\n// Imports\n// ---------------------------------------------------------------------------------------------------------------------\nconst dashboardActions = require('./dashboardActions');\nconst globalActions = require('./globalActions');\nconst playerActions = require('./playerActions');\n\n// Action creator\n// ---------------------------------------------------------------------------------------------------------------------\nconst mainActionCreator = {\n\t...dashboardActions,\n\t...globalActions,\n\t...playerActions,\n};\n\n// Exports\n// ---------------------------------------------------------------------------------------------------------------------\nmodule.exports = { mainActionCreator };\n","// @flow\n\n// Imports\n// ---------------------------------------------------------------------------------------------------------------------\nconst { DASHBOARD, PLAYER, GLOBAL } = require('../actions/actionTypes');\n\n// Types\n// ---------------------------------------------------------------------------------------------------------------------\ntype Tstate = {\n\tgameID: string | null,\n\tplayers: Array<string>,\n\trounds: Array<Array<string>>,\n\tcurrentRound: number,\n\twinner: string | null,\n};\n\ntype Taction = {\n\tpayload?: any,\n\ttype: string,\n}\n\n// Reducer\n// ---------------------------------------------------------------------------------------------------------------------\nconst defaultProps = {\n\tcurrentRound: 0,\n\tgameID: null,\n\tplayers: [],\n\trounds: [],\n\twinner: null,\n};\n\nconst dashboardReducer = (state: Tstate = defaultProps, action: Taction): Tstate => {\n\tswitch (action.type) {\n\t\tcase GLOBAL.RESET:\n\t\t\treturn defaultProps;\n\n\t\tcase DASHBOARD.CREATE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tgameID: action.payload || null,\n\t\t\t};\n\n\t\tcase DASHBOARD.SET_ROUNDS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrentRound: 0,\n\t\t\t\trounds: action.payload || [],\n\t\t\t};\n\n\t\tcase DASHBOARD.NEXT_ROUND:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrentRound: state.currentRound + 1,\n\t\t\t};\n\n\t\tcase DASHBOARD.SET_WINNER:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\twinner: action.payload || null,\n\t\t\t};\n\n\t\tcase PLAYER.JOIN:\n\t\t\treturn action.payload && state.gameID !== action.payload.gameID\n\t\t\t\t? state\n\t\t\t\t: {\n\t\t\t\t\t...state,\n\t\t\t\t\tplayers: action.payload\n\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t...state.players,\n\t\t\t\t\t\t\taction.payload.id,\n\t\t\t\t\t\t]\n\t\t\t\t\t\t: [...state.players],\n\t\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\n// Exports\n// ---------------------------------------------------------------------------------------------------------------------\nmodule.exports = { dashboardReducer };\n","// @flow\n\n// Imports\n// ---------------------------------------------------------------------------------------------------------------------\nconst { PLAYER, GLOBAL } = require('../actions/actionTypes');\n\n// Types\n// ---------------------------------------------------------------------------------------------------------------------\ntype Tjoin = {\n\tid: number,\n\tname: string,\n\tgameID: string,\n};\n\ntype Tplayer = {\n\tid: number,\n\tname: string,\n\tgameID: string,\n\tpoints: number,\n\teliminated: boolean,\n};\n\ntype Taction = {\n\tpayload?: Tjoin | Tplayer,\n\ttype: string,\n};\n\n// Reducer\n// ---------------------------------------------------------------------------------------------------------------------\nconst playerReducer = (state: Array<Tplayer> = [], action: Taction): Array<Tplayer> => {\n\tswitch (action.type) {\n\t\tcase GLOBAL.RESET:\n\t\t\treturn [];\n\n\t\tcase PLAYER.JOIN:\n\t\t\treturn [\n\t\t\t\t...state,\n\t\t\t\t{\n\t\t\t\t\t...action.payload,\n\t\t\t\t\teliminated: false,\n\t\t\t\t\tpoints: 0,\n\t\t\t\t},\n\t\t\t];\n\n\t\tcase PLAYER.UPDATE_POINTS:\n\t\t\treturn state.map((player: Tplayer) => {\n\t\t\t\tconst updatedPlayer = { ...player };\n\n\t\t\t\tif (action.payload && player.id === action.payload.id) {\n\t\t\t\t\tupdatedPlayer.points += action.payload.points ? parseInt(action.payload.points, 10) : 0;\n\t\t\t\t}\n\n\t\t\t\treturn updatedPlayer;\n\t\t\t});\n\n\t\tcase PLAYER.ELIMINATED:\n\t\t\treturn state.map((player: Tplayer) => {\n\t\t\t\tconst updatedPlayer = { ...player };\n\n\t\t\t\tif (action.payload && player.id === action.payload.id) {\n\t\t\t\t\tupdatedPlayer.eliminated = true;\n\t\t\t\t}\n\n\t\t\t\treturn updatedPlayer;\n\t\t\t});\n\n\t\tcase PLAYER.SET_KNOCKOUT_POINTS:\n\t\t\treturn state.map((player: Tplayer) => {\n\t\t\t\tconst updatedPlayer = { ...player };\n\n\t\t\t\tif (action.payload && player.id === action.payload.id) {\n\t\t\t\t\tupdatedPlayer.points = action.payload.points ? parseInt(action.payload.points, 10) : 0;\n\t\t\t\t}\n\n\t\t\t\treturn updatedPlayer;\n\t\t\t});\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\n// Exports\n// ---------------------------------------------------------------------------------------------------------------------\nmodule.exports = { playerReducer };\n","module.exports={IDLE:\"idle-state\",LOBBY:\"lobby-state\",INTRO:\"intro-state\",ROUND:\"round-state\",LADDER:\"ladder-state\",KNOCKOUT:\"knockout-state\",WINNER:\"winner-state\"};","// @flow\n\n// Imports\n// ---------------------------------------------------------------------------------------------------------------------\nconst { GLOBAL } = require('../actions/actionTypes');\n// $FlowFixMe\nconst STATES = require('../../../../constants/states');\n\n// Types\n// ---------------------------------------------------------------------------------------------------------------------\ntype Taction = {\n\tpayload?: string,\n\ttype: string,\n};\n\n// Reducer\n// ---------------------------------------------------------------------------------------------------------------------\nconst stateReducer = (state: string = STATES.IDLE, action: Taction): string => {\n\tswitch (action.type) {\n\t\tcase GLOBAL.RESET:\n\t\t\treturn STATES.IDLE;\n\n\t\tcase GLOBAL.SET_STATE:\n\t\t\treturn action.payload || STATES.IDLE;\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\n// Exports\n// ---------------------------------------------------------------------------------------------------------------------\nmodule.exports = { stateReducer };\n","// @flow\n\n// Imports\n// ---------------------------------------------------------------------------------------------------------------------\n// $FlowFixMe\nconst { combineReducers } = require('redux');\nconst { dashboardReducer } = require('./dashboardReducer');\nconst { playerReducer } = require('./playerReducer');\nconst { stateReducer } = require('./stateReducer');\n\n// Reducer\n// ---------------------------------------------------------------------------------------------------------------------\nconst mainReducer = combineReducers({\n\tactiveState: stateReducer,\n\tdashboard: dashboardReducer,\n\tplayers: playerReducer,\n});\n\n// Exports\n// ---------------------------------------------------------------------------------------------------------------------\nmodule.exports = { mainReducer };\n","// Imports\n// ---------------------------------------------------------------------------------------------------------------------\nconst { bindActionCreators, createStore } = require('redux');\nconst { mainActionCreator } = require('./actions/mainActionCreator');\nconst { mainReducer } = require('./reducers/mainReducer');\n\n// Create Redux store\n// ---------------------------------------------------------------------------------------------------------------------\nconst store = createStore(mainReducer);\nconst actions = bindActionCreators(mainActionCreator, store.dispatch);\n\n// Exports\n// ---------------------------------------------------------------------------------------------------------------------\nmodule.exports = {\n\tactions,\n\tstore,\n};\n","// @flow\n\n// Utils\n// ---------------------------------------------------------------------------------------------------------------------\nconst digit = (): number => Math.round(Math.random() * 9);\n\nconst generateID = (): string => `${Math.round(Date.now() * (Math.random() * 9999999 + 1))}`.substring(0, 16);\n\nconst getNearestPowerOf2 = (n: number): number => 1 << 31 - Math.clz32(n); // eslint-disable-line no-bitwise\n\n// Exports\n// ---------------------------------------------------------------------------------------------------------------------\nmodule.exports = {\n\tdigit,\n\tgenerateID,\n\tgetNearestPowerOf2,\n};\n","// @flow\n\n// Imports\n// ---------------------------------------------------------------------------------------------------------------------\nconst { store } = require('../state/store');\nconst { digit, getNearestPowerOf2 } = require('./math-utils');\n\n// Types\n// ---------------------------------------------------------------------------------------------------------------------\ninterface Iplayer {\n\tid: number,\n\tname: string;\n\tgameID: string;\n\tpoints: number;\n\teliminated: boolean;\n}\n\n// Utils\n// ---------------------------------------------------------------------------------------------------------------------\n// Calculations\nconst calculateTotalRounds = (players: Array<Iplayer>, playersPerRound: number): number => {\n\tlet total = 0;\n\tlet counter = 0;\n\tlet remainder = players.length;\n\n\twhile (remainder !== 0) {\n\t\tcounter += 1;\n\t\tremainder = (playersPerRound * counter) % players.length;\n\t}\n\n\t// Make sure that there are at least 3 rounds\n\twhile (total < 3) {\n\t\ttotal += counter;\n\t}\n\n\treturn total;\n};\n\n// Generators\nconst generateGame = (): string => `${digit()}${digit()}${digit()}${digit()}`;\n\nconst generateSingleRound = (\n\tplayers: Array<Iplayer>,\n\tplayersPerRound: number,\n\tusedPlayers: Array<Iplayer>,\n): {used: Array<Iplayer>, round: Array<Iplayer>} => {\n\tconst round = [];\n\tlet used = [...usedPlayers];\n\n\tlet targetPlayer;\n\tlet usablePlayers;\n\n\tfor (let i = 0; i < playersPerRound; i += 1) {\n\t\tusablePlayers = players.filter(\n\t\t\t// eslint-disable-next-line no-loop-func\n\t\t\t(player: Iplayer): boolean => used.indexOf(player) === -1 && round.indexOf(player) === -1,\n\t\t);\n\n\t\ttargetPlayer = usablePlayers[Math.round(Math.random() * (usablePlayers.length - 1))];\n\n\t\tround.push(targetPlayer);\n\t\tused = used.length + 1 === players.length ? [] : [...used, targetPlayer];\n\t}\n\n\treturn {\n\t\tround,\n\t\tused,\n\t};\n};\n\nconst generateRotations = (players: Array<Iplayer>, playersPerRound: number): Array<Array<Iplayer>> => {\n\tconst totalRounds = calculateTotalRounds(players, playersPerRound);\n\tconst rounds = [];\n\tlet usedPlayers = [];\n\n\tfor (let i = 0; i < totalRounds; i += 1) {\n\t\tconst { used, round } = generateSingleRound(players, playersPerRound, usedPlayers);\n\n\t\trounds.push(round);\n\t\tusedPlayers = used;\n\t}\n\n\treturn rounds;\n};\n\nconst generateRounds = (): Array<Array<Iplayer>> => generateRotations(store.getState().dashboard.players, 4);\n\nconst generateKnockoutLadder = (playerIDs: Array<string>, players: Array<Iplayer>): Array<Array<number>> => {\n\tconst playersInGame = players\n\t\t.filter((player: Iplayer): boolean => playerIDs.indexOf(player.id) !== -1 && !player.eliminated)\n\t\t.sort((a: Iplayer, b: Iplayer): number => b.points - a.points)\n\t\t.map((player: Iplayer): number => player.id);\n\n\tconst maxPlayers = getNearestPowerOf2(playersInGame.length);\n\tconst knockoutPlayers = playersInGame.slice(0, maxPlayers);\n\n\tconst rounds = [];\n\tlet counter = 0;\n\n\tfor (let i = 0; i < maxPlayers / 2; i += 1) {\n\t\trounds.push([\n\t\t\tknockoutPlayers[counter],\n\t\t\tknockoutPlayers[knockoutPlayers.length - counter - 1],\n\t\t]);\n\n\t\tcounter += 1;\n\t}\n\n\treturn rounds;\n};\n\n// Exports\n// ---------------------------------------------------------------------------------------------------------------------\nmodule.exports = {\n\tgenerateGame,\n\tgenerateKnockoutLadder,\n\tgenerateRounds,\n};\n","// @flow\n\n// Imports\n// ---------------------------------------------------------------------------------------------------------------------\nconst { actions, store } = require('../state/store');\nconst { generateRounds, generateGame, generateKnockoutLadder } = require('./game-utils');\nconst { generateID } = require('./math-utils');\n// $FlowFixMe\nconst STATES = require('../../../constants/states');\n\n// Types\n// ---------------------------------------------------------------------------------------------------------------------\ninterface Iplayer {\n\tid: number,\n\tname: string;\n\tgameID: string;\n\tpoints: number;\n\teliminated: boolean;\n}\n\n// Utils\n// ---------------------------------------------------------------------------------------------------------------------\n// TODO: separate this in separate files\n\nconst openLobby = (): void => {\n\t// Create a game\n\tconst gameID = generateGame();\n\n\t// Store game id and open lobby\n\tactions.createGame(gameID);\n\tactions.setState(STATES.LOBBY);\n\n\tconsole.log('SERVER: lobby opened for game:', gameID);\n};\n\nconst startGame = (): void => {\n\t// Generate rounds\n\tconst rounds = generateRounds();\n\n\t// Store generated rounds and start intro\n\tactions.setRounds(rounds);\n\tactions.setState(STATES.INTRO);\n\n\tconsole.log('SERVER: game started. Amount of rounds:', rounds.length);\n};\n\nconst startRound = (): void => {\n\tconst { dashboard } = store.getState();\n\n\t// Start round\n\tactions.setState(STATES.ROUND);\n\n\tconsole.log('SERVER: round started', dashboard.currentRound);\n};\n\nconst nextRound = (): void => {\n\tconst { dashboard } = store.getState();\n\n\t// Next round\n\tactions.nextRound();\n\tactions.setState(STATES.ROUND);\n\n\tconsole.log('SERVER: round started', dashboard.currentRound + 1);\n};\n\nconst createLadder = (): void => {\n\tconst { dashboard, players } = store.getState();\n\n\t// Generate roster\n\tconst knockout = generateKnockoutLadder(dashboard.players, players);\n\tactions.setRounds(knockout);\n\n\t// Eliminate players that are not in roster\n\t// $FlowFixMe\n\tconst eliminatedPlayers = players.filter((player: Iplayer): boolean => knockout.flat().indexOf(player.id) === -1);\n\teliminatedPlayers.forEach(actions.playerEliminated);\n\n\t// Show ladder\n\tactions.setState(STATES.LADDER);\n\n\tconsole.log('SERVER: ladder created for player count:', knockout.length * 2);\n};\n\nconst startKnockout = (): void => {\n\tconst { dashboard } = store.getState();\n\n\t// Start knockout round\n\tactions.setState(STATES.KNOCKOUT);\n\n\tconsole.log('SERVER: knockout started', dashboard.currentRound);\n};\n\nconst nextKnockout = (): void => {\n\tconst { dashboard } = store.getState();\n\n\t// Next round\n\tactions.nextRound();\n\tactions.setState(STATES.KNOCKOUT);\n\n\tconsole.log('SERVER: knockout started', dashboard.currentRound + 1);\n};\n\nconst showWinner = (): void => {\n\tconst { players } = store.getState();\n\n\t// Show winner\n\tactions.setState(STATES.WINNER);\n\n\tconsole.log('SERVER: the winner is', players.find((player: Iplayer): boolean => !player.eliminated).name);\n};\n\nconst endGame = (): void => {\n\t// Clear session\n\tactions.endSession();\n\tactions.setState(STATES.IDLE);\n\n\tconsole.log('SERVER: game ended');\n\tconsole.log('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~');\n};\n\nconst playerJoins = (player: Iplayer): void => {\n\tconst newPlayer = {\n\t\tid: generateID(),\n\t\t...player,\n\t};\n\n\tactions.joinGame(newPlayer);\n\n\tconsole.log('SERVER: player joined', newPlayer.gameID, newPlayer.name);\n};\n\n// Exports\n// ---------------------------------------------------------------------------------------------------------------------\nmodule.exports = {\n\tcreateLadder,\n\tendGame,\n\tnextKnockout,\n\tnextRound,\n\topenLobby,\n\tplayerJoins,\n\tshowWinner,\n\tstartGame,\n\tstartKnockout,\n\tstartRound,\n};\n","module.exports={SERVER:{STATE:\"server:state\",HEARTBEAT:\"server:heartbeat\",PLAYER_JOINS:\"server:player-joins\"},DASHBOARD:{OPEN_LOBBY:\"dashboard:open-lobby\",START_GAME:\"dashboard:start-game\",START_ROUND:\"dashboard:start-round\",NEXT_ROUND:\"dashboard:next-round\",START_KNOCKOUT:\"dashboard:start-knockout\",NEXT_KNOCKOUT:\"dashboard:next-knockout\",END_GAME:\"dashboard:end-game\"},PLAYER:{JOIN:\"player:join-game\"}};","// @flow\n\n// Imports\n// ---------------------------------------------------------------------------------------------------------------------\nconst { actions, store } = require('../state/store');\n\n// Utils\n// ---------------------------------------------------------------------------------------------------------------------\nconst setRoundPoints = (): void => {\n\tconst { dashboard } = store.getState();\n\n\tconst round = dashboard.rounds[dashboard.currentRound];\n\tround.forEach(actions.updatePoints);\n\n\tconsole.log('SERVER: points updated');\n};\n\nconst updateEliminated = (): void => {\n\tconst { dashboard } = store.getState();\n\n\tconst round = dashboard.rounds[dashboard.currentRound];\n\tconst targetWinner = Math.round(Math.random() * (round.length - 1));\n\n\t// Get winner and loser\n\tconst roundWinner = round[targetWinner];\n\tconst eliminated = round[round.length - 1 - targetWinner];\n\n\t// Set points for winner\n\tactions.setKnockoutPoints(\n\t\troundWinner,\n\t\tdashboard.rounds.length - dashboard.currentRound,\n\t);\n\n\t// Eliminate loser\n\tactions.playerEliminated(store.getState().players.find(player => player.id === eliminated));\n\n\tconsole.log('SERVER: knockout winner', targetWinner);\n};\n\n// Exports\n// ---------------------------------------------------------------------------------------------------------------------\nmodule.exports = {\n\tsetRoundPoints,\n\tupdateEliminated,\n};\n","// @flow\n\n// Imports\n// ---------------------------------------------------------------------------------------------------------------------\nconst {\n\topenLobby,\n\tstartGame,\n\tstartRound,\n\tnextRound,\n\tcreateLadder,\n\tstartKnockout,\n\tnextKnockout,\n\tshowWinner,\n\tendGame,\n\tplayerJoins,\n} = require('../util/state-utils');\n\n// $FlowFixMe\nconst { PORTS } = require('../../../constants/settings');\n// $FlowFixMe\nconst { SERVER, DASHBOARD, PLAYER } = require('../../../constants/events');\nconst { setRoundPoints, updateEliminated } = require('../util/player-utils');\n// $FlowFixMe\nconst STATES = require('../../../constants/states');\nconst { store } = require('../state/store');\n// $FlowFixMe\nconst Websocket = require('ws');\n\n// WebSocketServer\n// ---------------------------------------------------------------------------------------------------------------------\nclass WebSocketServer {\n\tconstructor(): void {\n\t\tthis.server = new Websocket.Server({\n\t\t\tnoServer: true,\n\t\t\tport: PORTS.WS_PORT,\n\t\t});\n\n\t\t// Setup socket listeners\n\t\tthis.server.on('connection', this.handleConnection);\n\n\t\t// Subscribe to redux store\n\t\tthis.previousState = store.getState().activeState;\n\t\tstore.subscribe(this.handleStoreChange);\n\t}\n\n\thandleStoreChange = (): void => {\n\t\tconst { activeState } = store.getState();\n\n\t\t// Only update if state has actually changed\n\t\tif (\n\t\t\tthis.previousState !== activeState\n\t\t\t|| activeState === STATES.ROUND\n\t\t\t|| activeState === STATES.KNOCKOUT\n\t\t) {\n\t\t\tthis.previousState = activeState;\n\t\t\tthis.send(SERVER.STATE, store.getState());\n\t\t}\n\t};\n\n\thandleConnection = (client: Websocket, req: any): void => {\n\t\t// Set current status to connected client\n\t\tthis.send(SERVER.HEARTBEAT, store.getState());\n\n\t\t// Add listeners to client\n\t\tclient.on('close', () => this.handleSocketClose(req));\n\t\tclient.on('message', this.handleSocketMessage);\n\t};\n\n\thandleSocketClose = (req: any): void => {\n\t\tconsole.log('SERVER: client closed connection with ip', req.connection.remoteAddress);\n\t};\n\n\thandleSocketMessage(message: string): void {\n\t\tconst { event, data } = JSON.parse(message);\n\t\tconst { activeState, dashboard, players } = store.getState();\n\n\t\tswitch (event) {\n\t\t\tcase DASHBOARD.OPEN_LOBBY:\n\t\t\t\t// create lobby where players can join\n\t\t\t\topenLobby();\n\t\t\t\tbreak;\n\n\t\t\tcase DASHBOARD.START_GAME:\n\t\t\t\t// create roster\n\t\t\t\tstartGame();\n\t\t\t\tbreak;\n\n\t\t\tcase DASHBOARD.START_ROUND:\n\t\t\t\t// Start first round\n\t\t\t\tstartRound();\n\t\t\t\tbreak;\n\n\t\t\tcase DASHBOARD.NEXT_ROUND:\n\t\t\t\t// Update player points\n\t\t\t\tsetRoundPoints();\n\n\t\t\t\t// Then, start next round or if all rounds are done, create knockout ladder\n\t\t\t\tif (dashboard.currentRound < dashboard.rounds.length - 1) {\n\t\t\t\t\tnextRound();\n\t\t\t\t} else {\n\t\t\t\t\tcreateLadder();\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase DASHBOARD.START_KNOCKOUT:\n\t\t\t\t// Start the first knockout round\n\t\t\t\tstartKnockout();\n\t\t\t\tbreak;\n\n\t\t\tcase DASHBOARD.NEXT_KNOCKOUT:\n\t\t\t\t// Updated eliminated players\n\t\t\t\tupdateEliminated();\n\n\t\t\t\t// Then, start next knockout round, or create next ladder until there is 1 player left\n\t\t\t\tif (dashboard.currentRound < dashboard.rounds.length - 1) {\n\t\t\t\t\tnextKnockout();\n\t\t\t\t} else if (players.filter(player => !player.eliminated).length !== 1) {\n\t\t\t\t\tcreateLadder();\n\t\t\t\t} else {\n\t\t\t\t\tshowWinner();\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase DASHBOARD.END_GAME:\n\t\t\t\t// Clear game and go back to idle\n\t\t\t\tendGame();\n\t\t\t\tbreak;\n\n\t\t\tcase PLAYER.JOIN:\n\t\t\t\t// Only allow players joining when lobby is open\n\t\t\t\tif (activeState === STATES.LOBBY) {\n\t\t\t\t\tconsole.log('player joined');\n\t\t\t\t\tplayerJoins(data);\n\t\t\t\t\tthis.send(SERVER.PLAYER_JOINS, store.getState());\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// Do nothing\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tsend(event: string, data: any): void {\n\t\tconsole.log(event);\n\n\t\tthis.server.clients.forEach((client: Websocket): void => {\n\t\t\tclient.send(JSON.stringify({\n\t\t\t\tdata,\n\t\t\t\tevent,\n\t\t\t}));\n\t\t});\n\t}\n}\n\n// Exports\n// ---------------------------------------------------------------------------------------------------------------------\nmodule.exports = { WebSocketServer };\n","// @flow\n\n// Imports\n// ---------------------------------------------------------------------------------------------------------------------\n// $FlowFixMe\nconst bodyParser = require('body-parser');\n// $FlowFixMe\nconst compression = require('compression');\n// $FlowFixMe\nconst cors = require('cors');\n// $FlowFixMe\nconst express = require('express');\nconst { ROOT_PATH } = require('./constants/paths');\n// $FlowFixMe\nconst { PORTS } = require('../../constants/settings');\nconst { WebSocketServer } = require('./sockets/WebSocketServer');\n\n// Server\n// ---------------------------------------------------------------------------------------------------------------------\nconst expressServer = express();\n\n// Enable cors\nexpressServer.use(\n\tcors({\n\t\tmethods: ['GET', 'POST'],\n\t\torigin: '*',\n\t}),\n);\n\n// Use compression for all request responses\nexpressServer.use(compression());\n\n// Parse incoming request bodies as JSON\nexpressServer.use(bodyParser.json());\n\nexpressServer.use(\n\tbodyParser.urlencoded({\n\t\textended: true,\n\t}),\n);\n\n// Accessible paths\nexpressServer.use('/', express.static(`${ROOT_PATH}/build/dashboard`, { redirect: true }));\nexpressServer.use('/player', express.static(`${ROOT_PATH}/build/player`, { redirect: true }));\nexpressServer.use('/static', express.static(`${ROOT_PATH}/static`, { redirect: true }));\n\n// Express listeners\nexpressServer.listen(PORTS.EXPRESS_PORT, () => console.log('SERVER: ready on port', PORTS.EXPRESS_PORT));\n\n// Websockets\n// ---------------------------------------------------------------------------------------------------------------------\nnew WebSocketServer(); // eslint-disable-line no-new\n\n// TODO: expect assertions\n"]}